sources/init.c:	if (e->p_num == 1)
sources/init.c:		e->sp = 'o';
sources/init.c:		e->bp = 'O';
sources/init.c:	else if (e->p_num == 2)
sources/init.c:		e->sp = 'x';
sources/init.c:		e->bp = 'X';
sources/init.c:		e->p_num = ft_atoi(nb);
sources/init.c:	e->row = ft_atoi(split[0]);
sources/init.c:	e->col = ft_atoi(split[1]);
sources/init.c:	if (!(e->grid = malloc(sizeof(char *) * e->row)))
sources/init.c:			e->grid[r] = ft_strdup(line + 4);
sources/init.c:	e->prow = ft_atoi(split[1]);
sources/init.c:	e->pcol = ft_atoi(split[2]);
sources/init.c:	if (!(e->piece = malloc(sizeof(char *) * e->prow)))
sources/init.c:			e->piece[r] = ft_strdup(line);
sources/init.c:		if (r == e->prow)
sources/init2.c:	e->ru = get_ru(e);
sources/init2.c:	e->rl = get_rl(e);
sources/init2.c:		printf("ru = %d, rl = %d\n", e->ru, e->rl);
sources/init2.c:	if (!(e->s_piece = malloc(sizeof(char *) * (e->pcol - e->rl) + 1)))
sources/init2.c:	i = e->ru;
sources/init2.c:	while (i < e->prow)
sources/init2.c:		//printf("**e->piece[%d][%d] = %c\n", i, j, e->piece[i][j]);
sources/init2.c:		j = e->rl;
sources/init2.c:		while (j < e->pcol)
sources/init2.c:			tmp = ft_strjoina(tmp, e->piece[i][j]);
sources/init2.c:		e->s_piece[pi] = tmp;
sources/init2.c:	e->piece[i] = NULL;
sources/init2.c:	while (i < e->prow - 1)
sources/init2.c:			printf("e->piece[%d][%d] = %c\n", i, j, e->piece[i][j]);
sources/init2.c:		if (j == e->pcol - 1 && e->piece[i][j] == '.')
sources/init2.c:		else if (e->piece[i][j] == '.')
sources/init2.c:	while (j < e->pcol - 1)
sources/init2.c:			printf("e->piece[%d][%d] = %c\n", i, j, e->piece[i][j]);
sources/init2.c:		if (i == e->prow - 1 && e->piece[i][j] == '.')
sources/init2.c:		else if (e->piece[i][j] == '.')
sources/read.c:	while (i < e->row)
sources/read.c:		while (j < e->col)
sources/read.c://			printf("%c", e->grid[i][j]);
sources/read.c:			if (check_piece(e, i, j, w) && i - e->ru >= 0 && j - e->rl >= 0 && i - e->ru <= e->prow && j - e->rl <= e->pcol)
sources/read.c://			ft_printf("%c", e->grid[i][j]);
sources/read.c://			if (e->grid[i][j] == e->bp)
sources/read.c:				e->i = i - e->ru;
sources/read.c:				e->j = j - e->rl;
sources/read.c:	while (pi < e->prow)
sources/read.c:		while (pj < e->pcol)
sources/read.c://			printf("%c", e->piece[pi][pj]);
sources/read.c://			printf("pi = %d, pj = %d, e->piece[pi][pj] = %c\n", pi, pj, e->piece[pi][pj]);
sources/read.c://			write(1, &e->piece[pi][pj], 1);
sources/read.c:			if (e->grid[gi + pi][gj + pj] && e->piece[pi][pj] == '*')
sources/read.c:				if (e->grid[gi + pi][gj + pj] == 'X' || e->grid[gi + pi][gj + pj] == 'x')
sources/read.c:				else if (e->grid[gi + pi][gj + pj] == 'O')
sources/read.c:			//if (e->piece[pi][pj] == '*' && (e->grid[(gi + pi) % e->row][(gj + pj) % e->col] == 'X' || e->grid[(gi + pi) % e->row][(gj + pj) % e->col] == 'x'))
sources/read.c:			//else if (e->piece[pi][pj] == '*' && (e->grid[(gi + pi) % e->row][(gj + pj) % e->col] == 'O'))
sources/read.c://			if (pi == e->prow - 1 && pj == e->pcol - 1 && count == 1)
sources/read.c://			if (e->piece[pi][pj] == '*')
sources/read.c://				e->grid[ABS(gi + pi) % e->row][ABS(gj + pj) % e->col] = 'T';
sources/read.c:	if (e->j == e->col - 1)
sources/read.c:		e->i += 1;
sources/read.c:		e->j = 0;
sources/read.c:	else if (e->i == e->row - 1)
sources/read.c:		e->j++;
sources/read.c:	while (e->grid[e->i])
sources/read.c:		if (e->j == e->col)
sources/read.c:			e->j = 0;
sources/read.c:		while (e->grid[e->i][e->j])
sources/read.c:			if (e->grid[e->i][e->j] == e->bp)
sources/read.c:			e->j++;
sources/read.c:		e->i++;
sources/tools.c:	while (i < e->row)
sources/tools.c:		while (j < e->col)
sources/tools.c:			ft_printf("%c", e->grid[i][j]);
sources/tools.c:	while (i < e->prow)
sources/tools.c:		while (j < e->pcol)
sources/tools.c:			ft_printf("%c", e->piece[i][j]);
sources/tools.c:	while (i < e->row - e->ru)
sources/tools.c:		while (j < e->col - e->rl)
sources/tools.c:			//ft_printf("************%c", e->s_piece[i][j]);
